package main

import (
	"bytes"
	"cpabse"
	"encoding/gob"
	"fmt"
	"math/rand"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/Nik-U/pbc"
	"github.com/hyperledger/fabric/core/chaincode/shim"
	pb "github.com/hyperledger/fabric/protos/peer"
)

var curveParams = "type a\n" +
	"q 87807107996633125224377819847540498158068831994142082" +
	"1102865339926647563088022295707862517942266222142315585" +
	"8769582317459277713367317481324925129998224791\n" +
	"h 12016012264891146079388821366740534204802954401251311" +
	"822919615131047207289359704531102844802183906537786776\n" +
	"r 730750818665451621361119245571504901405976559617\n" +
	"exp2 159\n" + "exp1 107\n" + "sign1 1\n" + "sign0 1\n"

type MyChaincode struct {
}

//实现Init函数，初始化
func (t *MyChaincode) Init(stub shim.ChaincodeStubInterface) pb.Response {
	fmt.Println("my init")
	args := stub.GetStringArgs()
	if len(args) != 2 {
		return shim.Error("Incorrect arguments. Expecting a key and a value")
	}

	err := stub.PutState(args[0], []byte(args[1]))
	if err != nil {
		return shim.Error(fmt.Sprintf("Failed to create asset: %s", args[0]))
	}
	return shim.Success(nil)
}

func (t *MyChaincode) Invoke(stub shim.ChaincodeStubInterface) pb.Response {
	fn, args := stub.GetFunctionAndParameters()
	fmt.Println("invoke")
	var result []byte
	var err error
	if fn == "set" {
		fmt.Println("set")
		result, err = upload(stub, args)
	} else if fn == "batchq" {							//随机搜索n次返回n个结果
		n, _:= strconv.Atoi(args[0])
		totalTime := int64(0)
		tt := int64(0)
		for i := 0; i < n; i++{
			fmt.Println("query")
			result, err, tt = query(stub, i)
			totalTime += tt
		}
		t := strconv.FormatFloat(float64(totalTime) * 0.000001, 'f', 2,64)
		fmt.Println("Total time: " + t +" ms")

		//将搜索总时间写入文件
		writeFile("totalTime_q.txt", t)

	} else if fn == "chainquery" {
		fmt.Println("chainquery")
		result, err, _ = chainquery(stub, args[0])         //arg[0]为地址（Key1, Key2, ...）
	} else if fn == "batchcq" {
		fmt.Println("batchcq")
		var totalTime = int64(0)
		result, err, totalTime = batchcq(stub, args[0])         //arg[0]为地址串，以空格分开（Key1, Key2, ...）
		tt := strconv.FormatFloat(float64(totalTime) * 0.000001, 'f', 2,64)
		fmt.Println("Total time: " + tt +" ms")

		//将搜索总时间写入文件
		writeFile("totalTime_cq.txt", tt)
	}
	if err != nil {
		return shim.Error(err.Error())
	}

	// Return the result as success payload
	return shim.Success(result)
}

func writeFile(adress string, data string){
	f, err := os.OpenFile(adress, os.O_CREATE |os.O_APPEND|os.O_WRONLY, 0777)
	if err != nil {
		fmt.Println(err)
		return
	}
	_, err = fmt.Fprint(f, data + " ")
	if err != nil {
		fmt.Println(err)
		f.Close()
		return
	}
	err = f.Close()
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println("Write file complete!")

}

func upload(stub shim.ChaincodeStubInterface, args []string) ([]byte, error) {
	Key := "Key" + args[0]
	//args[0]为id，即计数器n，args[1]为key，关键字，args[2]为值，即关键字对应的数据
	//此处的key为计数器n和kw的复合键，即最后字典中键值对的键
	var key, _ = stub.CreateCompositeKey(Key, []string{args[0], args[1]})
	if len(args) != 3 {
		return []byte(""), fmt.Errorf("Incorrect arguments. Expecting ID ,a key and a value")
	}

	err := stub.PutState(key, []byte(args[2]))
	if err != nil {
		return []byte(""), fmt.Errorf("Failed to set asset: %s", args[0])
	}
	fmt.Printf("\033[32m%s\033[0m\n", "id: " + args[0] + " data: " + args[2])
	fmt.Println()
	return []byte(args[0]), nil
}

//随即搜索一个文档
func query(stub shim.ChaincodeStubInterface, i int) ([]byte, error, int64){
	rand.Seed(int64(i))
	Key := "Key" + strconv.Itoa(rand.Intn(10000) + 20000)

	//开始时间，一会计时用
	start := time.Now()
	fmt.Printf("\033[33m%s\033[0m\n", "Key: " + (Key))

	//模拟属性加密
	var p *pbc.Pairing
	params := new(pbc.Params)
	params, _ = pbc.NewParamsFromString(curveParams)
	p = pbc.NewPairing(params)
	args := "58 255 129 3 1 1 6 66 121 116 101 84 107 1 255 130 0 1 4 1 4 84 111 107 49 1 10 0 1 4 84 111 107 50 1 10 0 1 4 84 111 107 51 1 10 0 1 5 67 111 109 112 115 1 255 134 0 0 0 35 255 133 2 1 1 20 91 93 42 99 112 97 98 115 101 46 66 121 116 101 84 107 67 111 109 112 1 255 134 0 1 255 132 0 0 39 255 131 3 1 2 255 132 0 1 3 1 4 65 116 116 114 1 12 0 1 4 65 95 106 49 1 10 0 1 4 66 95 106 49 1 10 0 0 0 254 2 154 255 130 1 255 128 88 233 56 118 67 90 178 56 142 98 94 114 70 199 18 167 153 125 160 163 191 11 193 249 163 24 12 156 48 204 156 91 167 139 135 76 107 47 23 36 184 106 43 86 191 42 251 234 128 87 67 110 18 12 225 72 153 125 57 151 175 97 67 6 93 48 69 44 121 144 99 25 14 210 11 111 127 191 17 87 185 182 250 179 198 112 76 147 173 169 242 74 187 175 134 162 120 154 58 164 222 37 35 128 68 90 115 210 92 117 18 140 130 215 230 174 79 138 17 166 204 190 174 235 77 102 248 154 1 255 128 23 196 210 121 191 205 109 12 157 79 25 111 111 224 94 128 61 227 136 23 180 103 181 36 7 236 209 61 165 178 56 197 141 13 108 72 58 26 206 58 119 51 201 0 96 115 171 253 83 118 95 175 183 21 126 191 198 80 107 189 130 187 19 34 152 217 195 199 255 94 156 203 178 193 213 67 71 214 150 76 94 112 48 164 213 35 123 135 41 113 82 221 54 205 17 115 4 118 136 18 44 147 184 147 251 13 19 123 211 233 198 225 252 168 223 136 3 214 18 81 233 57 150 178 148 83 199 99 1 255 128 57 112 99 116 51 10 161 209 61 36 163 129 79 33 51 168 170 117 142 4 106 2 76 172 136 66 161 51 17 194 196 49 6 109 165 247 26 91 229 229 193 152 124 129 253 36 166 127 26 180 122 149 93 91 100 121 73 222 107 232 34 166 147 87 139 102 95 76 113 56 156 66 46 36 233 0 216 44 155 4 234 1 13 135 238 246 162 72 148 60 248 58 214 242 204 89 96 239 160 222 38 252 217 205 224 190 163 153 227 193 74 7 230 212 92 232 151 157 120 34 121 78 47 176 242 239 44 225 1 1 1 3 98 97 102 1 255 128 165 43 200 99 70 73 137 232 47 84 104 74 188 64 109 73 27 75 196 36 154 82 147 112 74 117 5 131 1 123 133 206 214 213 183 241 43 243 128 31 169 61 89 169 56 3 114 202 192 230 15 62 222 42 228 112 0 47 215 247 237 1 22 45 164 36 209 74 96 204 137 154 21 31 26 201 12 240 55 242 63 38 242 38 8 30 240 71 104 61 81 32 37 237 104 21 206 176 230 194 155 33 136 206 121 103 113 89 173 45 249 126 168 195 42 229 188 95 164 116 9 168 62 154 141 51 169 151 1 255 128 26 205 141 211 229 165 197 16 203 177 48 2 233 144 219 110 146 10 207 231 27 128 229 8 249 12 75 245 138 72 250 17 108 67 93 18 134 11 247 46 117 136 237 35 161 169 143 14 158 71 149 133 186 70 132 220 195 150 61 30 178 232 12 141 131 198 227 134 152 247 79 24 240 21 175 143 27 60 236 53 251 123 44 242 86 22 38 224 20 237 241 132 217 8 161 98 12 228 70 85 151 201 163 161 234 62 103 226 36 170 177 124 73 76 190 214 181 142 232 48 99 53 144 98 58 90 82 241 0 0"
	cpabse.TkDec(args, p)


	//用复合键中一个键进行查询，这里用地址Key查询
	queryResultsIterator, err := stub.GetStateByPartialCompositeKey(Key, []string{})
	if err != nil {
		return []byte(""), fmt.Errorf("Incorrect"), 0
	}
	defer queryResultsIterator.Close()

	var result []string

	compositeKeyParts := "54 255 129 3 1 1 7 66 121 116 101 67 112 104 1 255 130 0 1 5 1 1 87 1 10 0 1 2 87 48 1 10 0 1 2 87 49 1 10 0 1 1 83 1 10 0 1 1 80 1 255 132 0 0 0 124 255 131 3 1 1 10 66 121 116 101 80 111 108 105 99 121 1 255 132 0 1 10 1 1 75 1 4 0 1 4 65 116 116 114 1 12 0 1 1 67 1 10 0 1 2 67 112 1 10 0 1 8 67 104 105 108 100 114 101 110 1 255 134 0 1 1 81 1 255 136 0 1 11 83 97 116 105 115 102 105 97 98 108 101 1 2 0 1 10 77 105 110 95 108 101 97 118 101 115 1 4 0 1 5 65 116 116 114 105 1 4 0 1 4 83 97 116 108 1 255 140 0 0 0 35 255 133 2 1 1 20 91 93 42 99 112 97 98 115 101 46 66 121 116 101 80 111 108 105 99 121 1 255 134 0 1 255 132 0 0 46 255 135 3 1 1 14 66 121 116 101 80 111 108 121 110 111 109 105 97 108 1 255 136 0 1 2 1 3 68 101 103 1 4 0 1 4 67 111 101 102 1 255 138 0 0 0 23 255 137 2 1 1 9 91 93 91 93 117 105 110 116 56 1 255 138 0 1 10 0 0 19 255 139 2 1 1 5 91 93 105 110 116 1 255 140 0 1 4 0 0 254 6 124 255 130 1 255 128 114 58 28 30 20 7 229 242 10 242 116 78 72 52 37 91 156 84 136 52 153 226 125 6 93 154 88 18 52 229 254 236 22 80 87 118 102 201 210 249 181 133 169 178 155 132 34 66 175 87 128 238 38 88 41 213 163 229 131 17 185 136 96 128 24 146 190 203 50 119 111 185 126 231 93 87 93 126 33 166 208 84 145 1 96 60 159 221 127 158 162 50 138 155 32 17 103 24 33 9 46 2 238 95 20 203 242 133 28 15 74 77 138 129 225 160 4 237 32 233 164 52 151 237 26 255 164 111 1 255 128 49 252 35 75 200 75 196 29 109 130 34 119 123 103 175 217 48 52 75 49 26 231 65 133 178 115 129 214 93 59 56 111 99 167 110 197 79 85 193 237 250 173 212 247 199 96 148 90 235 10 44 213 140 227 138 151 70 251 233 35 207 226 29 10 160 125 44 239 159 72 249 177 249 48 16 155 71 146 144 53 59 96 138 19 104 127 174 75 96 47 249 136 136 162 250 193 207 156 42 18 151 45 114 128 49 160 135 61 2 133 240 64 99 174 68 214 178 93 56 57 180 37 98 88 155 150 209 244 1 255 128 163 30 127 10 252 97 127 127 89 1 160 30 107 241 32 23 128 192 155 182 170 91 205 223 220 114 135 18 188 12 85 120 169 220 61 93 4 243 174 218 94 188 77 183 187 172 181 76 64 30 7 174 205 102 102 198 140 165 86 122 139 97 89 89 12 252 128 194 96 47 254 36 40 92 131 255 197 102 200 50 224 150 241 163 185 110 220 17 92 205 5 56 55 85 120 144 75 250 190 195 14 115 143 177 138 126 184 37 113 151 172 69 165 155 226 212 23 215 136 123 206 73 147 79 88 182 180 45 2 1 2 4 2 1 4 4 3 1 2 1 3 102 111 111 1 255 128 53 223 253 139 22 125 226 80 92 110 20 79 169 152 226 82 251 210 200 130 8 90 253 87 222 106 92 80 12 0 160 165 67 67 177 130 218 90 81 59 170 137 64 5 246 81 100 175 235 135 49 92 147 235 235 234 74 111 191 55 185 18 31 228 92 192 39 198 56 47 24 50 172 195 76 185 138 181 54 167 250 75 224 167 168 92 228 32 127 219 42 5 116 53 11 193 166 177 72 188 98 52 82 28 53 113 45 183 205 57 176 158 21 251 47 238 253 50 67 230 253 70 203 202 231 9 219 90 1 255 128 62 68 68 127 176 88 86 186 81 220 130 136 204 208 47 150 170 66 143 252 164 99 60 154 22 248 153 196 59 52 158 142 203 52 147 92 209 104 211 67 164 156 115 51 246 205 154 105 248 92 183 50 82 233 14 37 232 172 169 123 132 49 124 47 88 141 3 251 220 240 244 30 172 198 38 53 222 10 106 148 204 251 79 146 215 247 160 75 210 193 38 54 188 79 22 151 249 211 173 20 44 0 157 148 254 201 216 102 70 127 237 145 255 121 180 241 188 116 34 149 50 234 193 62 125 82 6 209 2 2 1 20 92 221 59 113 233 43 75 247 6 6 34 241 221 101 173 238 222 89 80 123 0 0 1 2 1 3 98 97 114 1 255 128 7 45 86 28 180 112 246 202 174 31 2 108 185 217 198 7 169 197 109 234 83 74 117 36 128 135 16 107 1 164 254 25 234 143 212 9 98 249 94 183 126 188 199 131 51 93 235 101 128 15 221 211 187 233 144 96 16 109 140 143 141 245 102 8 122 43 40 92 99 245 178 60 249 58 248 183 224 145 20 199 178 51 179 142 38 123 129 126 104 3 44 173 200 172 120 162 44 246 167 182 0 123 224 15 186 35 118 227 220 26 146 230 254 53 176 121 181 120 153 76 74 247 29 187 161 183 212 62 1 255 128 102 51 235 244 39 147 155 83 10 49 54 157 191 195 212 142 181 213 193 57 86 16 27 255 223 166 178 188 176 208 7 19 41 232 4 83 242 152 71 35 84 204 104 171 180 9 133 153 116 175 149 240 231 211 172 194 251 71 212 15 132 188 20 220 119 128 185 50 61 230 141 214 63 145 126 137 8 94 115 255 94 165 218 134 47 250 205 47 112 82 107 65 27 16 38 32 189 46 120 246 111 46 193 200 41 194 157 74 88 188 138 179 95 54 9 93 161 236 179 66 10 98 93 148 151 101 190 206 2 2 1 20 0 132 54 58 178 63 55 7 192 148 121 43 38 89 121 20 246 64 150 76 0 0 1 2 1 3 102 105 109 1 255 128 56 190 41 67 22 240 40 107 18 182 232 39 55 254 125 213 245 216 94 80 142 244 134 188 210 6 50 34 36 77 215 253 222 28 236 204 116 152 53 1 205 66 78 152 154 85 9 176 167 125 94 87 18 122 185 248 37 252 49 109 136 116 62 96 39 104 199 135 63 92 10 208 30 120 99 67 169 190 67 70 231 190 199 148 202 247 130 110 107 10 67 67 87 222 40 205 161 103 5 145 146 163 48 54 208 227 0 12 102 165 44 123 5 128 235 235 61 228 152 86 163 214 58 238 87 149 133 4 1 255 128 95 152 62 208 118 127 71 123 110 168 84 138 100 84 20 6 88 49 116 229 49 204 28 240 232 106 148 46 146 134 157 250 201 161 208 141 212 213 194 20 130 106 38 36 164 217 77 152 47 208 193 172 41 233 112 117 158 203 176 152 50 206 41 20 107 22 79 169 77 197 185 60 47 206 80 250 218 25 61 122 31 217 93 127 164 194 102 171 115 25 200 135 116 192 113 142 148 248 47 241 2 235 233 232 211 231 103 120 50 167 50 185 161 214 110 165 49 241 16 142 242 123 234 172 2 229 221 25 2 2 1 20 36 43 49 3 123 83 42 24 123 34 207 100 111 77 68 59 14 39 220 30 0 0 1 1 2 1 2 20 57 54 64 169 32 23 88 230 75 119 204 184 148 113 226 200 198 114 10 169 20 35 166 250 200 201 19 243 16 186 142 86 57 72 243 203 38 23 231 69 210 0 0 1 2 1 3 98 97 102 1 255 128 106 111 128 92 66 94 46 15 15 52 159 157 43 1 242 156 33 122 156 203 165 128 85 70 143 80 95 43 40 136 128 126 67 177 80 61 130 221 75 120 76 101 207 71 209 172 29 200 213 52 75 124 74 103 116 174 67 212 80 226 49 204 26 50 113 184 46 203 215 17 75 107 197 21 110 35 237 242 115 201 165 231 74 220 9 109 3 61 31 241 76 99 57 71 128 185 36 224 26 59 56 52 209 184 139 168 229 175 170 137 225 196 130 234 65 145 42 218 156 32 54 125 194 87 161 142 193 154 1 255 128 72 25 227 85 191 57 192 126 167 113 238 38 126 230 38 223 130 148 199 244 72 164 0 136 135 48 129 121 136 254 211 13 17 189 10 217 64 204 83 231 142 5 188 216 52 156 126 195 42 31 194 82 253 130 38 115 152 52 157 87 9 132 203 146 126 103 205 71 109 189 253 196 12 168 33 34 64 236 51 61 188 146 49 93 54 60 174 67 134 103 19 51 248 83 32 198 203 111 142 212 65 1 118 210 180 48 93 220 105 122 225 222 21 146 247 155 195 108 139 129 186 47 1 1 221 160 247 249 2 2 1 20 57 54 64 169 32 23 88 230 75 119 204 184 148 113 226 200 198 114 10 169 0 0 1 2 1 20 57 54 64 169 32 23 88 230 75 119 204 184 148 113 226 200 198 114 10 169 0 0 0"
	//返回结果
	for queryResultsIterator.HasNext() {

		responseRange, err := queryResultsIterator.Next()
		if err != nil {
			return []byte(""), fmt.Errorf("Incorrect"), 0
		}
		fmt.Println(responseRange.Value)
		//分离数据和地址
		Value := strings.Split(string(responseRange.Value), "::")

		//模拟属性加密
		cpabse.CphDec(compositeKeyParts, p)

		//输出结果（数据）
		result = append(result, Value[0])
		fmt.Printf("\033[34mResult: %s\033[0m\n", Value[0])
	}
	queryResultsIterator.Close()
	buf2 := &bytes.Buffer{}
	gob.NewEncoder(buf2).Encode(result)
	byteSlice := []byte(buf2.Bytes())

	end := time.Now()
	//输出总时间
	b := end.Sub(start)
	fmt.Printf("Query time cost: %s \n", b)
	fmt.Println()
	return byteSlice, nil, b.Nanoseconds()
}



//老版的query
//{
//	start := time.Now()             //开始时间，一会计时用
//
//	var p *pbc.Pairing
//	params := new(pbc.Params)
//	params, _ = pbc.NewParamsFromString(curveParams)
//	p = pbc.NewPairing(params)
//	if len(args) != 1 {
//		return []byte(""), fmt.Errorf("Incorrect arguments. Expecting a token")
//	}
//
//	tk := cpabse.TkDec(args[0], p)
//
//	//用符合键中一个键进行查询，这里用kw查询
//	queryResultsIterator, err := stub.GetStateByPartialCompositeKey("Key", []string{})
//	if err != nil {
//		return []byte(""), fmt.Errorf("Incorrect")
//	}
//	defer queryResultsIterator.Close()
//
//	var result []string
//
//	//返回结果
//	for queryResultsIterator.HasNext() {
//
//		responseRange, err := queryResultsIterator.Next()
//		if err != nil {
//			return []byte(""), fmt.Errorf("Incorrect")
//		}
//		_, compositeKeyParts, err := stub.SplitCompositeKey(responseRange.Key)
//		if err != nil {
//			return []byte(""), fmt.Errorf("Incorrect")
//		}
//
//		cph := cpabse.CphDec(compositeKeyParts[1], p)
//		if cpabse.Check(tk, cph, p) {
//			result = append(result, string(responseRange.Value))
//			fmt.Println(string(responseRange.Value))
//		} else {
//			continue
//		}
//	}
//	buf2 := &bytes.Buffer{}
//	gob.NewEncoder(buf2).Encode(result)
//	byteSlice := []byte(buf2.Bytes())
//
//	//结束时间
//	end := time.Now()
//	//输出总时间
//	b := end.Sub(start)
//	fmt.Println("Query time cost: %s", b)
//	return byteSlice, nil
//}

func chainquery(stub shim.ChaincodeStubInterface, Key string) ([]byte, error, int64) {
	//开始时间，一会计时用
	start := time.Now()
	fmt.Printf("\033[33m%s\033[0m\n", "Key: " + Key)

	//模拟属性加密
	var p *pbc.Pairing
	params := new(pbc.Params)
	params, _ = pbc.NewParamsFromString(curveParams)
	p = pbc.NewPairing(params)
	args := "58 255 129 3 1 1 6 66 121 116 101 84 107 1 255 130 0 1 4 1 4 84 111 107 49 1 10 0 1 4 84 111 107 50 1 10 0 1 4 84 111 107 51 1 10 0 1 5 67 111 109 112 115 1 255 134 0 0 0 35 255 133 2 1 1 20 91 93 42 99 112 97 98 115 101 46 66 121 116 101 84 107 67 111 109 112 1 255 134 0 1 255 132 0 0 39 255 131 3 1 2 255 132 0 1 3 1 4 65 116 116 114 1 12 0 1 4 65 95 106 49 1 10 0 1 4 66 95 106 49 1 10 0 0 0 254 2 154 255 130 1 255 128 88 233 56 118 67 90 178 56 142 98 94 114 70 199 18 167 153 125 160 163 191 11 193 249 163 24 12 156 48 204 156 91 167 139 135 76 107 47 23 36 184 106 43 86 191 42 251 234 128 87 67 110 18 12 225 72 153 125 57 151 175 97 67 6 93 48 69 44 121 144 99 25 14 210 11 111 127 191 17 87 185 182 250 179 198 112 76 147 173 169 242 74 187 175 134 162 120 154 58 164 222 37 35 128 68 90 115 210 92 117 18 140 130 215 230 174 79 138 17 166 204 190 174 235 77 102 248 154 1 255 128 23 196 210 121 191 205 109 12 157 79 25 111 111 224 94 128 61 227 136 23 180 103 181 36 7 236 209 61 165 178 56 197 141 13 108 72 58 26 206 58 119 51 201 0 96 115 171 253 83 118 95 175 183 21 126 191 198 80 107 189 130 187 19 34 152 217 195 199 255 94 156 203 178 193 213 67 71 214 150 76 94 112 48 164 213 35 123 135 41 113 82 221 54 205 17 115 4 118 136 18 44 147 184 147 251 13 19 123 211 233 198 225 252 168 223 136 3 214 18 81 233 57 150 178 148 83 199 99 1 255 128 57 112 99 116 51 10 161 209 61 36 163 129 79 33 51 168 170 117 142 4 106 2 76 172 136 66 161 51 17 194 196 49 6 109 165 247 26 91 229 229 193 152 124 129 253 36 166 127 26 180 122 149 93 91 100 121 73 222 107 232 34 166 147 87 139 102 95 76 113 56 156 66 46 36 233 0 216 44 155 4 234 1 13 135 238 246 162 72 148 60 248 58 214 242 204 89 96 239 160 222 38 252 217 205 224 190 163 153 227 193 74 7 230 212 92 232 151 157 120 34 121 78 47 176 242 239 44 225 1 1 1 3 98 97 102 1 255 128 165 43 200 99 70 73 137 232 47 84 104 74 188 64 109 73 27 75 196 36 154 82 147 112 74 117 5 131 1 123 133 206 214 213 183 241 43 243 128 31 169 61 89 169 56 3 114 202 192 230 15 62 222 42 228 112 0 47 215 247 237 1 22 45 164 36 209 74 96 204 137 154 21 31 26 201 12 240 55 242 63 38 242 38 8 30 240 71 104 61 81 32 37 237 104 21 206 176 230 194 155 33 136 206 121 103 113 89 173 45 249 126 168 195 42 229 188 95 164 116 9 168 62 154 141 51 169 151 1 255 128 26 205 141 211 229 165 197 16 203 177 48 2 233 144 219 110 146 10 207 231 27 128 229 8 249 12 75 245 138 72 250 17 108 67 93 18 134 11 247 46 117 136 237 35 161 169 143 14 158 71 149 133 186 70 132 220 195 150 61 30 178 232 12 141 131 198 227 134 152 247 79 24 240 21 175 143 27 60 236 53 251 123 44 242 86 22 38 224 20 237 241 132 217 8 161 98 12 228 70 85 151 201 163 161 234 62 103 226 36 170 177 124 73 76 190 214 181 142 232 48 99 53 144 98 58 90 82 241 0 0"
	cpabse.TkDec(args, p)


	//用符合键中一个键进行查询，这里用地址Key查询
	queryResultsIterator, err := stub.GetStateByPartialCompositeKey(Key, []string{})
	if err != nil {
		return []byte(""), fmt.Errorf("Incorrect"), 0
	}
	defer queryResultsIterator.Close()

	var result []string

	compositeKeyParts := "54 255 129 3 1 1 7 66 121 116 101 67 112 104 1 255 130 0 1 5 1 1 87 1 10 0 1 2 87 48 1 10 0 1 2 87 49 1 10 0 1 1 83 1 10 0 1 1 80 1 255 132 0 0 0 124 255 131 3 1 1 10 66 121 116 101 80 111 108 105 99 121 1 255 132 0 1 10 1 1 75 1 4 0 1 4 65 116 116 114 1 12 0 1 1 67 1 10 0 1 2 67 112 1 10 0 1 8 67 104 105 108 100 114 101 110 1 255 134 0 1 1 81 1 255 136 0 1 11 83 97 116 105 115 102 105 97 98 108 101 1 2 0 1 10 77 105 110 95 108 101 97 118 101 115 1 4 0 1 5 65 116 116 114 105 1 4 0 1 4 83 97 116 108 1 255 140 0 0 0 35 255 133 2 1 1 20 91 93 42 99 112 97 98 115 101 46 66 121 116 101 80 111 108 105 99 121 1 255 134 0 1 255 132 0 0 46 255 135 3 1 1 14 66 121 116 101 80 111 108 121 110 111 109 105 97 108 1 255 136 0 1 2 1 3 68 101 103 1 4 0 1 4 67 111 101 102 1 255 138 0 0 0 23 255 137 2 1 1 9 91 93 91 93 117 105 110 116 56 1 255 138 0 1 10 0 0 19 255 139 2 1 1 5 91 93 105 110 116 1 255 140 0 1 4 0 0 254 6 124 255 130 1 255 128 114 58 28 30 20 7 229 242 10 242 116 78 72 52 37 91 156 84 136 52 153 226 125 6 93 154 88 18 52 229 254 236 22 80 87 118 102 201 210 249 181 133 169 178 155 132 34 66 175 87 128 238 38 88 41 213 163 229 131 17 185 136 96 128 24 146 190 203 50 119 111 185 126 231 93 87 93 126 33 166 208 84 145 1 96 60 159 221 127 158 162 50 138 155 32 17 103 24 33 9 46 2 238 95 20 203 242 133 28 15 74 77 138 129 225 160 4 237 32 233 164 52 151 237 26 255 164 111 1 255 128 49 252 35 75 200 75 196 29 109 130 34 119 123 103 175 217 48 52 75 49 26 231 65 133 178 115 129 214 93 59 56 111 99 167 110 197 79 85 193 237 250 173 212 247 199 96 148 90 235 10 44 213 140 227 138 151 70 251 233 35 207 226 29 10 160 125 44 239 159 72 249 177 249 48 16 155 71 146 144 53 59 96 138 19 104 127 174 75 96 47 249 136 136 162 250 193 207 156 42 18 151 45 114 128 49 160 135 61 2 133 240 64 99 174 68 214 178 93 56 57 180 37 98 88 155 150 209 244 1 255 128 163 30 127 10 252 97 127 127 89 1 160 30 107 241 32 23 128 192 155 182 170 91 205 223 220 114 135 18 188 12 85 120 169 220 61 93 4 243 174 218 94 188 77 183 187 172 181 76 64 30 7 174 205 102 102 198 140 165 86 122 139 97 89 89 12 252 128 194 96 47 254 36 40 92 131 255 197 102 200 50 224 150 241 163 185 110 220 17 92 205 5 56 55 85 120 144 75 250 190 195 14 115 143 177 138 126 184 37 113 151 172 69 165 155 226 212 23 215 136 123 206 73 147 79 88 182 180 45 2 1 2 4 2 1 4 4 3 1 2 1 3 102 111 111 1 255 128 53 223 253 139 22 125 226 80 92 110 20 79 169 152 226 82 251 210 200 130 8 90 253 87 222 106 92 80 12 0 160 165 67 67 177 130 218 90 81 59 170 137 64 5 246 81 100 175 235 135 49 92 147 235 235 234 74 111 191 55 185 18 31 228 92 192 39 198 56 47 24 50 172 195 76 185 138 181 54 167 250 75 224 167 168 92 228 32 127 219 42 5 116 53 11 193 166 177 72 188 98 52 82 28 53 113 45 183 205 57 176 158 21 251 47 238 253 50 67 230 253 70 203 202 231 9 219 90 1 255 128 62 68 68 127 176 88 86 186 81 220 130 136 204 208 47 150 170 66 143 252 164 99 60 154 22 248 153 196 59 52 158 142 203 52 147 92 209 104 211 67 164 156 115 51 246 205 154 105 248 92 183 50 82 233 14 37 232 172 169 123 132 49 124 47 88 141 3 251 220 240 244 30 172 198 38 53 222 10 106 148 204 251 79 146 215 247 160 75 210 193 38 54 188 79 22 151 249 211 173 20 44 0 157 148 254 201 216 102 70 127 237 145 255 121 180 241 188 116 34 149 50 234 193 62 125 82 6 209 2 2 1 20 92 221 59 113 233 43 75 247 6 6 34 241 221 101 173 238 222 89 80 123 0 0 1 2 1 3 98 97 114 1 255 128 7 45 86 28 180 112 246 202 174 31 2 108 185 217 198 7 169 197 109 234 83 74 117 36 128 135 16 107 1 164 254 25 234 143 212 9 98 249 94 183 126 188 199 131 51 93 235 101 128 15 221 211 187 233 144 96 16 109 140 143 141 245 102 8 122 43 40 92 99 245 178 60 249 58 248 183 224 145 20 199 178 51 179 142 38 123 129 126 104 3 44 173 200 172 120 162 44 246 167 182 0 123 224 15 186 35 118 227 220 26 146 230 254 53 176 121 181 120 153 76 74 247 29 187 161 183 212 62 1 255 128 102 51 235 244 39 147 155 83 10 49 54 157 191 195 212 142 181 213 193 57 86 16 27 255 223 166 178 188 176 208 7 19 41 232 4 83 242 152 71 35 84 204 104 171 180 9 133 153 116 175 149 240 231 211 172 194 251 71 212 15 132 188 20 220 119 128 185 50 61 230 141 214 63 145 126 137 8 94 115 255 94 165 218 134 47 250 205 47 112 82 107 65 27 16 38 32 189 46 120 246 111 46 193 200 41 194 157 74 88 188 138 179 95 54 9 93 161 236 179 66 10 98 93 148 151 101 190 206 2 2 1 20 0 132 54 58 178 63 55 7 192 148 121 43 38 89 121 20 246 64 150 76 0 0 1 2 1 3 102 105 109 1 255 128 56 190 41 67 22 240 40 107 18 182 232 39 55 254 125 213 245 216 94 80 142 244 134 188 210 6 50 34 36 77 215 253 222 28 236 204 116 152 53 1 205 66 78 152 154 85 9 176 167 125 94 87 18 122 185 248 37 252 49 109 136 116 62 96 39 104 199 135 63 92 10 208 30 120 99 67 169 190 67 70 231 190 199 148 202 247 130 110 107 10 67 67 87 222 40 205 161 103 5 145 146 163 48 54 208 227 0 12 102 165 44 123 5 128 235 235 61 228 152 86 163 214 58 238 87 149 133 4 1 255 128 95 152 62 208 118 127 71 123 110 168 84 138 100 84 20 6 88 49 116 229 49 204 28 240 232 106 148 46 146 134 157 250 201 161 208 141 212 213 194 20 130 106 38 36 164 217 77 152 47 208 193 172 41 233 112 117 158 203 176 152 50 206 41 20 107 22 79 169 77 197 185 60 47 206 80 250 218 25 61 122 31 217 93 127 164 194 102 171 115 25 200 135 116 192 113 142 148 248 47 241 2 235 233 232 211 231 103 120 50 167 50 185 161 214 110 165 49 241 16 142 242 123 234 172 2 229 221 25 2 2 1 20 36 43 49 3 123 83 42 24 123 34 207 100 111 77 68 59 14 39 220 30 0 0 1 1 2 1 2 20 57 54 64 169 32 23 88 230 75 119 204 184 148 113 226 200 198 114 10 169 20 35 166 250 200 201 19 243 16 186 142 86 57 72 243 203 38 23 231 69 210 0 0 1 2 1 3 98 97 102 1 255 128 106 111 128 92 66 94 46 15 15 52 159 157 43 1 242 156 33 122 156 203 165 128 85 70 143 80 95 43 40 136 128 126 67 177 80 61 130 221 75 120 76 101 207 71 209 172 29 200 213 52 75 124 74 103 116 174 67 212 80 226 49 204 26 50 113 184 46 203 215 17 75 107 197 21 110 35 237 242 115 201 165 231 74 220 9 109 3 61 31 241 76 99 57 71 128 185 36 224 26 59 56 52 209 184 139 168 229 175 170 137 225 196 130 234 65 145 42 218 156 32 54 125 194 87 161 142 193 154 1 255 128 72 25 227 85 191 57 192 126 167 113 238 38 126 230 38 223 130 148 199 244 72 164 0 136 135 48 129 121 136 254 211 13 17 189 10 217 64 204 83 231 142 5 188 216 52 156 126 195 42 31 194 82 253 130 38 115 152 52 157 87 9 132 203 146 126 103 205 71 109 189 253 196 12 168 33 34 64 236 51 61 188 146 49 93 54 60 174 67 134 103 19 51 248 83 32 198 203 111 142 212 65 1 118 210 180 48 93 220 105 122 225 222 21 146 247 155 195 108 139 129 186 47 1 1 221 160 247 249 2 2 1 20 57 54 64 169 32 23 88 230 75 119 204 184 148 113 226 200 198 114 10 169 0 0 1 2 1 20 57 54 64 169 32 23 88 230 75 119 204 184 148 113 226 200 198 114 10 169 0 0 0"
	//返回结果
	for queryResultsIterator.HasNext() {

		responseRange, err := queryResultsIterator.Next()
		if err != nil {
			return []byte(""), fmt.Errorf("Incorrect"), 0
		}
		fmt.Println(responseRange.Value)
		//分离数据和地址
		Value := strings.Split(string(responseRange.Value), "::")

		//模拟属性加密
		cpabse.CphDec(compositeKeyParts, p)

		//输出结果（数据）
		result = append(result, Value[0])
		fmt.Printf("\033[34mResult: %s\033[0m\n", Value[0])
		if len(Value) == 1{
			break
		}
		key_next := Value[1]

		//如果没有地址则为链尾，停止搜索，否则继续搜索文件链
		for {
			fmt.Printf("\033[33m%s\033[0m\n", "Key: " + key_next)
			//用复合键中一个键进行查询，这里用地址Key查询
			queryResultsIterator1, err := stub.GetStateByPartialCompositeKey(key_next, []string{})
			if err != nil {
				return []byte(""), fmt.Errorf("Incorrect"), 0
			}
			defer queryResultsIterator1.Close()

			responseRange, err = queryResultsIterator1.Next()
			if err != nil {
				return []byte(""), fmt.Errorf("Incorrect"), 0
			}
			fmt.Println(responseRange.Value)
			//分离数据和地址
			Value := strings.Split(string(responseRange.Value), "::")

			//模拟属性加密
			cpabse.CphDec(compositeKeyParts, p)

			//输出结果（数据）
			result = append(result, Value[0])

			//找到链尾 搜索结束
			if len(Value) == 1{
				fmt.Printf("\033[34mResult: %s\033[0m\n", Value[0])
				fmt.Println()
				break
			}

			//否则，继续按地址搜索
			key_next = Value[1]
			fmt.Printf("\033[34mResult: %s\033[0m\n", Value[0])
		}

		//if len(Value) != 2 {
		//      break
		//} else {
		//      var r []string
		//      res, _ := chainquery(stub, Value[1])
		//      r = append(r, strconv.Itoa(int(res[0])))
		//      for i := 1; i < len(res); i++ {
		//              r = append(r, strconv.Itoa(int(res[i])))
		//      }
		//      result = append(result, r...)
		//}
	}
	queryResultsIterator.Close()
	buf2 := &bytes.Buffer{}
	gob.NewEncoder(buf2).Encode(result)
	byteSlice := []byte(buf2.Bytes())

	end := time.Now()
	//输出总时间
	b := end.Sub(start)
	fmt.Printf("Chainquery time cost: %s \n", b)
	fmt.Println()
	return byteSlice, nil, b.Nanoseconds()
}

//批量搜索，统计时间，这里搜索时间不计写入账本所需时间
func batchcq(stub shim.ChaincodeStubInterface, Key string) ([]byte, error, int64) {
	keyList := strings.Split(Key, " ")
	toatalTime := int64(0)
	for _, v := range keyList[:len(keyList)-1]{
		_, err, timecost := chainquery(stub, "Key" + v)
		toatalTime += timecost
		if err != nil {
			return []byte(""), fmt.Errorf("Incorrect"), 0
		}
	}
	return []byte(""), nil, toatalTime
}

func main() {
	err := shim.Start(new(MyChaincode))
	if err != nil {
		fmt.Printf("error start MyChaincode")
	}
}
